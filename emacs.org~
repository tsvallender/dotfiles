#+TITLE: Emacs Configuration
#+AUTHOR: T S Vallender
#+EMAIL: t@tsvallender.co.uk
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

* General setup
** Package management

We’re going to want a bunch of packages, so we need to set up access to the two main repositories of Emacs packages: ELPA and MELPA. We then set up ~use-package~ so we can manage packages more nicely. We /attempt/ to set it up so we always ensure the packages exist and thus shouldn’t need to pass ~:ensure t~ every time, but this part doesn’t seem to be working.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))
#+END_SRC

** Don’t litter

Emacs has some annoying habits by default which result in leaving temporary files laying around the filesystem or automatically writing to Emacs’ =init.el=.

Write auto-generated customisation code to a separate file:

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

Keep temporary files in their own directory, not all over the filesystem

#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :ensure t)
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/"))))
#+END_SRC

** Theming

Firstly we switch of some of the unnecessary frills present in GUI mode, such as scroll bars, menu bars etc.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (setq-default cursor-type 'bar)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
)
(setq inhibit-startup-message t)
(setq visible-bell t)
(global-hl-line-mode t)
#+END_SRC

Here we primarily set up a slight buffer around each frame which to give things a little breathing room.
#+BEGIN_SRC emacs-lisp
(modify-all-frames-parameters
 '((right-divider-width . 10)
   (internal-border-width . 10)))
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))
#+END_SRC

We then use Prot’s fantastic /Modus/ theme.
#+BEGIN_SRC emacs-lisp
(use-package modus-themes
  :ensure t
  :config
  (load-theme 'modus-vivendi-tinted))
#+END_SRC

And grab the modeline from /Doom Emacs/ which has some niceties such as icons.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (doom-modeline-mode 1)
  (setq doom-modeline-height 40))
#+END_SRC

*** Fonts
I’ve found font setup to be one of the more painful parts of Emacs configuration, but this gets things looking good.

Ligatures are nice. Currently just enabled in programming modes, plus a few in ~eww~, but I may make them global and see if anything looks weird

#+BEGIN_SRC emacs-lisp
(use-package ligature
  :config
  (ligature-set-ligatures 't '("www"))
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  (global-ligature-mode t))
#+END_SRC

And here we choose our fonts, at the moment I’m enjoying Iosevka and ET Bembo. 

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "IosevkaTerm Nerd Font" :height 100 :weight 'light)
(set-face-attribute 'fixed-pitch nil :font "IosevkaTerm Nerd Font" :height 100 :weight 'light)
(set-face-attribute 'variable-pitch nil :font "ETBembo" :height 120 :weight 'light)
#+END_SRC

#+RESULTS:

** Other niceties
~which-key~ is a lovely package which shows you the available options when inputting a mu8lti-stage command
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

Enable Emacs’ builtin project management (~C-x p~)
#+BEGIN_SRC emacs-lisp
(use-package project :ensure t)
#+END_SRC
* Programming

~rainbow-delimeters~ gives us colour coded brackets, parens etc. which is nice in any language but particularly lisps.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t)
#+END_SRC
** Treesitter
I’m not really doing anything to take advantage of Treesitter yet, but setting it up at least gives us better syntax highlighting.
#+BEGIN_SRC emacs-lisp
(setq treesit-language-source-alist
      '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
        (go . ("https://github.com/tree-sitter/tree-sitter-go" "v0.20.0"))
	(elisp "https://github.com/Wilfred/tree-sitter-elisp")
	(html "https://github.com/tree-sitter/tree-sitter-html")
	(javascript "https://github.com/tree-sitter/tree-sitter-javascript" "v0.20.1" "src")
	(json "https://github.com/tree-sitter/tree-sitter-json")
	(markdown "https://github.com/ikatyang/tree-sitter-markdown")
	(ruby "https://github.com/tree-sitter/tree-sitter-ruby")
	(yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js-ts-mode))
(add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-ts-mode))
#+END_SRC
** LSP
The Language Server Protocol is one of Microsoft’s better contributions to the world. I think this setup probably needs some more love, but it’s a good starting point.
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :ensure t
  :config
  (with-evl-after-load 'eglot
    (add-to-list 'eglot-server-programs
		 `(ruby-ts-mode . ("ruby-lsp"))))
  :hook ((ruby-ts-mode . eglot-ensure)))
#+END_SRC

** Ruby
** Lisp
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t)
(use-package geiser-guile)
#+END_SRC
* Org Mode

Org Mode is just fantastic, and the main thing that claws me back to Emacs.

Here we have a setup routing that we will call when entering Org Mode, and getting Org Mode itself.
#+BEGIN_SRC emacs-lisp
(defun org-mode-setup ()
  (org-indent-mode)
  (visual-line-mode 1)
  (setq org-hide-emphasis-markers t
	org-hide-leading-stars t
	org-adapt-indentation f
	org-pretty-entities t
	org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-edit-src-content-indentation 0))

(use-package org
  :ensure t
  :hook
  (org-mode . org-mode-setup)
  (org-mode . variable-pitch-mode))

#+END_SRC

Olivetti gives us a centred column to write in, which is especially nice for Org Mode but I may actually enable this in programming modes at a default terminal width, it just looks nice.
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :hook
    (org-mode . olivetti-mode))
#+END_SRC

  Org Superstar gives us fancy unicode bullets instead of just asterisks, and boxes for TODOs etc. Those aren’t working properly though, need to look at that.
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (use-package org-superstar
    :config
    (setq org-superstar-leading-bullet " ")
    (setq org-superstar-special-todo-items t) ;; Makes TODO header bullets into boxes
    (setq org-superstar-todo-bullet-alist '(("TODO" . 9744)
                                            ("DONE" . 9744)))))
#+END_SRC

And set up fonts for the various header levels etc.
#+BEGIN_SRC emacs-lisp
  (let* ((variable-tuple
          (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install ETBembo."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))
     `(org-block ((t (:inherit fixed-pitch))))
     `(org-code ((t (:inherit (shadow fixed-pitch)))))
     `(org-document-info ((t (:foreground "dark orange"))))
     `(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     `(org-indent ((t (:inherit (org-hide fixed-pitch)))))
     `(org-link ((t (:foreground "royal blue" :underline t))))
     `(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     `(org-property-value ((t (:inherit fixed-pitch))) t)
     `(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     `(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
     `(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
     `(org-verbatim ((t (:inherit (shadow fixed-pitch)))))))
#+END_SRC


